package main

import (
	"context"
	"errors"
	"fmt"
	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	"net/http"
	"os"
	"os/signal"
	"singlishwords/config"
	"singlishwords/log"
	"singlishwords/middleware"
	"singlishwords/router"
	"syscall"
	"time"

	_ "singlishwords/docs" // docs is generated by Swag CLI, you have to import it.
)

// @title Singlish words API document
// @version 1.0
// @description The singlish words app API document
// @host 35.175.147.177
// @BasePath /api/v1
func main() {
	if config.App.Mode == "release" {
		gin.SetMode(gin.ReleaseMode)
	}

	g := gin.New()
	g.Use(middleware.RouteLogger())
	g.Use(middleware.Cors())
	g.Use(gin.Recovery())

	if config.Swagger.Enable {
		g.GET(config.Swagger.Path, ginSwagger.WrapHandler(swaggerFiles.Handler))
		//url := ginSwagger.URL("http://localhost:8080/swagger/doc.json") // The url pointing to API definition
		//g.GET(config.Swagger.Path, ginSwagger.WrapHandler(swaggerFiles.Handler, url))
	}

	g = router.InitRouter(g)

	//s := &http.Server{
	//	Addr:           ":8080",
	//	Handler:        router,
	//	ReadTimeout:    10 * time.Second,
	//	WriteTimeout:   10 * time.Second,
	//	MaxHeaderBytes: 1 << 20,
	//}

	srv := &http.Server{
		Addr:    config.App.Addr,
		Handler: g,
	}

	// Initializing the server in a goroutine so that
	// it won't block the graceful shutdown handling below
	go func() {
		if err := srv.ListenAndServe(); err != nil && errors.Is(err, http.ErrServerClosed) {
			fmt.Printf("listen: %s\n", err)
			log.Logger.Infof("listen: %s\n", err)
		}
	}()

	// Wait for interrupt signal to gracefully shutdown the server with
	// a timeout of 5 seconds.
	quit := make(chan os.Signal)
	// kill (no param) default send syscall.SIGTERM
	// kill -2 is syscall.SIGINT
	// kill -9 is syscall.SIGKILL but can't be catch, so don't need add it
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	fmt.Println("Shutting down server...")
	log.Logger.Infof("Shutting down server...")

	// The context is used to inform the server it has 5 seconds to finish
	// the request it is currently handling
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := srv.Shutdown(ctx); err != nil {
		fmt.Println("Server forced to shutdown:", err)
		log.Logger.Info("Server forced to shutdown:", err)
	}

	fmt.Println("Server exiting")
	log.Logger.Infof("Server exiting")
}
